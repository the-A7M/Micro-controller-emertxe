//Don't copy the code... Study the logic
//While pressing 1 on the picsimlab simulator the LED brightens
//While pressing 2 on the picsimlab simulator the LED dimms

#include <xc.h>
#pragma config WDTE = OFF

#define KEYPAD_PORT             PORTB
#define KEYPAD_PORT_DDR         TRISB

#define LEVEL 0
#define STATE 1

#define INPUT_LINES             0x3F

#define SW1                     0x3E
#define SW2                     0x3D
#define SW3                     0x3B
#define SW4                     0x37
#define SW5                     0x2F
#define SW6                     0x1F

#define ALL_RELEASED            INPUT_LINES

void init_digital_keypad(void);
void init_config(void);
unsigned char read_digital_keypad(unsigned char detection);


void init_config(void)                                                  //function for initializing required peripherals
{
    init_digital_keypad();
    TRISD=0x00;                                                         //initializing portd as output
    PORTD=0x00;                                                         //initializing LEDs as off state
}

void main(void) 
{
    init_config();
    unsigned char key;
    static unsigned long int period=100, duty_cycle=50,program_cycle=0; //initializing variables... duty_cycle variable will be responsible for the LED brightness
    static unsigned short wait = 0;
    while(1)
    {
        if(program_cycle<duty_cycle)                                    //logic for turning on LED with required duty cycle
            {
                RD0=1;
            }
            else
            {
                RD0=0;
            }
            if(program_cycle++==(period-1))
            {
                program_cycle=0;
            }
        
        key= read_digital_keypad(LEVEL);                                //reading state of switch
        
        
if (!wait--)                                                            //delay
	{
		wait = 100;

		if (key == SW1)                                                     //increase duty cycle hence brightens
		{
			if (duty_cycle != period)
			{
				duty_cycle++;
			}
		}
		if (key == SW2)                                                     //decrese duty cycle hence diminishes
		{
			if (duty_cycle != 0)
			{
				duty_cycle--;
			}
		}
	}
    }
}

void init_digital_keypad(void)                                          //initalizing the keypad
{
    KEYPAD_PORT_DDR = KEYPAD_PORT_DDR | 0x3F;
}

unsigned char read_digital_keypad(unsigned char detection)              //function to read state of keypad
{
    static unsigned char once=1;
    if (detection == LEVEL)                                 
    {
        return KEYPAD_PORT & INPUT_LINES;                   
        
    }
    else if (detection == STATE)                                
    {
        if(((KEYPAD_PORT & INPUT_LINES)!= ALL_RELEASED) && once)  
        {
            once=0;                                                
           return KEYPAD_PORT & INPUT_LINES;                      
        }
        else if((KEYPAD_PORT & INPUT_LINES)== ALL_RELEASED)                                                
        {
            once=1;                                                
        }
    }
    return ALL_RELEASED;
}
